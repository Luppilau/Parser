// Implementation file for parser generated by fsyacc
module FM4FUNParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser/src/FM4FUNParser.fsp"

open FM4FUNTypesAST

# 10 "Parser/src/FM4FUNParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | SKIP
  | IF
  | FI
  | DO
  | OD
  | EOF
  | TRUE
  | FALSE
  | EQUAL
  | LT
  | GT
  | SCOLON
  | COLON
  | RSQBR
  | LSQBR
  | DASH
  | AND
  | OR
  | EXCL
  | ARROW
  | BOX
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | BOOL of (bool)
  | ID of (string)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_SKIP
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_EOF
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_EQUAL
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_SCOLON
    | TOKEN_COLON
    | TOKEN_RSQBR
    | TOKEN_LSQBR
    | TOKEN_DASH
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_EXCL
    | TOKEN_ARROW
    | TOKEN_BOX
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_BOOL
    | TOKEN_ID
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_command
    | NONTERM_guarded
    | NONTERM_arithmetic
    | NONTERM_boolean

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | SKIP  -> 0 
  | IF  -> 1 
  | FI  -> 2 
  | DO  -> 3 
  | OD  -> 4 
  | EOF  -> 5 
  | TRUE  -> 6 
  | FALSE  -> 7 
  | EQUAL  -> 8 
  | LT  -> 9 
  | GT  -> 10 
  | SCOLON  -> 11 
  | COLON  -> 12 
  | RSQBR  -> 13 
  | LSQBR  -> 14 
  | DASH  -> 15 
  | AND  -> 16 
  | OR  -> 17 
  | EXCL  -> 18 
  | ARROW  -> 19 
  | BOX  -> 20 
  | TIMES  -> 21 
  | DIV  -> 22 
  | PLUS  -> 23 
  | MINUS  -> 24 
  | POW  -> 25 
  | LPAR  -> 26 
  | RPAR  -> 27 
  | BOOL _ -> 28 
  | ID _ -> 29 
  | NUM _ -> 30 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_SKIP 
  | 1 -> TOKEN_IF 
  | 2 -> TOKEN_FI 
  | 3 -> TOKEN_DO 
  | 4 -> TOKEN_OD 
  | 5 -> TOKEN_EOF 
  | 6 -> TOKEN_TRUE 
  | 7 -> TOKEN_FALSE 
  | 8 -> TOKEN_EQUAL 
  | 9 -> TOKEN_LT 
  | 10 -> TOKEN_GT 
  | 11 -> TOKEN_SCOLON 
  | 12 -> TOKEN_COLON 
  | 13 -> TOKEN_RSQBR 
  | 14 -> TOKEN_LSQBR 
  | 15 -> TOKEN_DASH 
  | 16 -> TOKEN_AND 
  | 17 -> TOKEN_OR 
  | 18 -> TOKEN_EXCL 
  | 19 -> TOKEN_ARROW 
  | 20 -> TOKEN_BOX 
  | 21 -> TOKEN_TIMES 
  | 22 -> TOKEN_DIV 
  | 23 -> TOKEN_PLUS 
  | 24 -> TOKEN_MINUS 
  | 25 -> TOKEN_POW 
  | 26 -> TOKEN_LPAR 
  | 27 -> TOKEN_RPAR 
  | 28 -> TOKEN_BOOL 
  | 29 -> TOKEN_ID 
  | 30 -> TOKEN_NUM 
  | 33 -> TOKEN_end_of_input
  | 31 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_command 
    | 3 -> NONTERM_command 
    | 4 -> NONTERM_command 
    | 5 -> NONTERM_command 
    | 6 -> NONTERM_command 
    | 7 -> NONTERM_command 
    | 8 -> NONTERM_guarded 
    | 9 -> NONTERM_guarded 
    | 10 -> NONTERM_arithmetic 
    | 11 -> NONTERM_arithmetic 
    | 12 -> NONTERM_arithmetic 
    | 13 -> NONTERM_arithmetic 
    | 14 -> NONTERM_arithmetic 
    | 15 -> NONTERM_arithmetic 
    | 16 -> NONTERM_arithmetic 
    | 17 -> NONTERM_arithmetic 
    | 18 -> NONTERM_arithmetic 
    | 19 -> NONTERM_arithmetic 
    | 20 -> NONTERM_boolean 
    | 21 -> NONTERM_boolean 
    | 22 -> NONTERM_boolean 
    | 23 -> NONTERM_boolean 
    | 24 -> NONTERM_boolean 
    | 25 -> NONTERM_boolean 
    | 26 -> NONTERM_boolean 
    | 27 -> NONTERM_boolean 
    | 28 -> NONTERM_boolean 
    | 29 -> NONTERM_boolean 
    | 30 -> NONTERM_boolean 
    | 31 -> NONTERM_boolean 
    | 32 -> NONTERM_boolean 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 33 
let _fsyacc_tagOfErrorTerminal = 31

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | SKIP  -> "SKIP" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | EOF  -> "EOF" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | EQUAL  -> "EQUAL" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | SCOLON  -> "SCOLON" 
  | COLON  -> "COLON" 
  | RSQBR  -> "RSQBR" 
  | LSQBR  -> "LSQBR" 
  | DASH  -> "DASH" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | EXCL  -> "EXCL" 
  | ARROW  -> "ARROW" 
  | BOX  -> "BOX" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | BOOL _ -> "BOOL" 
  | ID _ -> "ID" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | SKIP  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | SCOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | RSQBR  -> (null : System.Object) 
  | LSQBR  -> (null : System.Object) 
  | DASH  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | EXCL  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | BOX  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 17us; 15us; 25us; 16us; 3us; 65535us; 18us; 19us; 21us; 22us; 27us; 26us; 26us; 65535us; 6us; 7us; 8us; 9us; 12us; 13us; 18us; 41us; 21us; 41us; 27us; 41us; 30us; 31us; 48us; 33us; 49us; 34us; 50us; 35us; 51us; 36us; 52us; 37us; 53us; 38us; 54us; 39us; 55us; 40us; 64us; 41us; 65us; 41us; 66us; 41us; 67us; 41us; 68us; 41us; 69us; 42us; 71us; 43us; 72us; 44us; 73us; 45us; 74us; 46us; 75us; 47us; 9us; 65535us; 18us; 24us; 21us; 24us; 27us; 24us; 55us; 63us; 64us; 58us; 65us; 59us; 66us; 60us; 67us; 61us; 68us; 62us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 38us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 5us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 1us; 2us; 6us; 2us; 13us; 14us; 15us; 16us; 18us; 1us; 3us; 6us; 3us; 13us; 14us; 15us; 16us; 18us; 1us; 3us; 1us; 3us; 1us; 3us; 6us; 3us; 13us; 14us; 15us; 16us; 18us; 1us; 4us; 2us; 5us; 5us; 2us; 5us; 8us; 1us; 5us; 1us; 6us; 2us; 6us; 9us; 1us; 6us; 1us; 7us; 2us; 7us; 9us; 1us; 7us; 5us; 8us; 21us; 22us; 23us; 24us; 1us; 8us; 2us; 9us; 9us; 1us; 9us; 1us; 10us; 2us; 11us; 12us; 1us; 12us; 6us; 12us; 13us; 14us; 15us; 16us; 18us; 1us; 12us; 6us; 13us; 13us; 14us; 15us; 16us; 18us; 6us; 13us; 14us; 14us; 15us; 16us; 18us; 6us; 13us; 14us; 15us; 15us; 16us; 18us; 6us; 13us; 14us; 15us; 16us; 16us; 18us; 6us; 13us; 14us; 15us; 16us; 17us; 18us; 6us; 13us; 14us; 15us; 16us; 18us; 18us; 6us; 13us; 14us; 15us; 16us; 18us; 19us; 12us; 13us; 14us; 15us; 16us; 18us; 19us; 26us; 27us; 28us; 29us; 30us; 31us; 11us; 13us; 14us; 15us; 16us; 18us; 26us; 27us; 28us; 29us; 30us; 31us; 6us; 13us; 14us; 15us; 16us; 18us; 26us; 6us; 13us; 14us; 15us; 16us; 18us; 27us; 6us; 13us; 14us; 15us; 16us; 18us; 28us; 6us; 13us; 14us; 15us; 16us; 18us; 29us; 6us; 13us; 14us; 15us; 16us; 18us; 30us; 6us; 13us; 14us; 15us; 16us; 18us; 31us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 2us; 19us; 32us; 1us; 19us; 1us; 20us; 5us; 21us; 21us; 22us; 23us; 24us; 5us; 21us; 22us; 22us; 23us; 24us; 5us; 21us; 22us; 23us; 23us; 24us; 5us; 21us; 22us; 23us; 24us; 24us; 5us; 21us; 22us; 23us; 24us; 25us; 5us; 21us; 22us; 23us; 24us; 32us; 2us; 21us; 23us; 2us; 22us; 24us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 27us; 2us; 28us; 29us; 1us; 29us; 2us; 30us; 31us; 1us; 31us; 1us; 32us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 12us; 14us; 16us; 23us; 25us; 32us; 34us; 36us; 38us; 45us; 47us; 50us; 53us; 55us; 57us; 60us; 62us; 64us; 67us; 69us; 75us; 77us; 80us; 82us; 84us; 87us; 89us; 96us; 98us; 105us; 112us; 119us; 126us; 133us; 140us; 147us; 160us; 172us; 179us; 186us; 193us; 200us; 207us; 214us; 216us; 218us; 220us; 222us; 224us; 226us; 228us; 231us; 233us; 235us; 241us; 247us; 253us; 259us; 265us; 271us; 274us; 277us; 279us; 281us; 283us; 285us; 287us; 289us; 292us; 294us; 297us; 299us; |]
let _fsyacc_action_rows = 77
let _fsyacc_actionTableElements = [|4us; 32768us; 0us; 14us; 1us; 18us; 3us; 21us; 29us; 4us; 0us; 49152us; 2us; 32768us; 5us; 3us; 11us; 17us; 0us; 16385us; 2us; 32768us; 12us; 5us; 14us; 8us; 1us; 32768us; 8us; 6us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 5us; 16386us; 21us; 50us; 22us; 51us; 23us; 48us; 24us; 49us; 25us; 53us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 6us; 32768us; 13us; 10us; 21us; 50us; 22us; 51us; 23us; 48us; 24us; 49us; 25us; 53us; 1us; 32768us; 12us; 11us; 1us; 32768us; 8us; 12us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 5us; 16387us; 21us; 50us; 22us; 51us; 23us; 48us; 24us; 49us; 25us; 53us; 0us; 16388us; 1us; 16389us; 11us; 17us; 1us; 16392us; 11us; 17us; 4us; 32768us; 0us; 14us; 1us; 18us; 3us; 21us; 29us; 4us; 6us; 32768us; 18us; 68us; 24us; 52us; 26us; 55us; 28us; 57us; 29us; 29us; 30us; 28us; 2us; 32768us; 2us; 20us; 20us; 27us; 0us; 16390us; 6us; 32768us; 18us; 68us; 24us; 52us; 26us; 55us; 28us; 57us; 29us; 29us; 30us; 28us; 2us; 32768us; 4us; 23us; 20us; 27us; 0us; 16391us; 3us; 32768us; 16us; 64us; 17us; 65us; 19us; 25us; 4us; 32768us; 0us; 14us; 1us; 18us; 3us; 21us; 29us; 4us; 1us; 16393us; 20us; 27us; 6us; 32768us; 18us; 68us; 24us; 52us; 26us; 55us; 28us; 57us; 29us; 29us; 30us; 28us; 0us; 16394us; 1us; 16395us; 14us; 30us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 6us; 32768us; 13us; 32us; 21us; 50us; 22us; 51us; 23us; 48us; 24us; 49us; 25us; 53us; 0us; 16396us; 3us; 16397us; 21us; 50us; 22us; 51us; 25us; 53us; 3us; 16398us; 21us; 50us; 22us; 51us; 25us; 53us; 1us; 16399us; 25us; 53us; 1us; 16400us; 25us; 53us; 3us; 16401us; 21us; 50us; 22us; 51us; 25us; 53us; 1us; 16402us; 25us; 53us; 6us; 32768us; 21us; 50us; 22us; 51us; 23us; 48us; 24us; 49us; 25us; 53us; 27us; 56us; 10us; 32768us; 8us; 69us; 9us; 74us; 10us; 72us; 18us; 70us; 21us; 50us; 22us; 51us; 23us; 48us; 24us; 49us; 25us; 53us; 27us; 56us; 9us; 32768us; 8us; 69us; 9us; 74us; 10us; 72us; 18us; 70us; 21us; 50us; 22us; 51us; 23us; 48us; 24us; 49us; 25us; 53us; 5us; 16410us; 21us; 50us; 22us; 51us; 23us; 48us; 24us; 49us; 25us; 53us; 5us; 16411us; 21us; 50us; 22us; 51us; 23us; 48us; 24us; 49us; 25us; 53us; 5us; 16412us; 21us; 50us; 22us; 51us; 23us; 48us; 24us; 49us; 25us; 53us; 5us; 16413us; 21us; 50us; 22us; 51us; 23us; 48us; 24us; 49us; 25us; 53us; 5us; 16414us; 21us; 50us; 22us; 51us; 23us; 48us; 24us; 49us; 25us; 53us; 5us; 16415us; 21us; 50us; 22us; 51us; 23us; 48us; 24us; 49us; 25us; 53us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 6us; 32768us; 18us; 68us; 24us; 52us; 26us; 55us; 28us; 57us; 29us; 29us; 30us; 28us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 1us; 16406us; 16us; 64us; 0us; 16407us; 1us; 16408us; 16us; 64us; 0us; 16409us; 3us; 32768us; 16us; 64us; 17us; 65us; 27us; 76us; 7us; 32768us; 16us; 66us; 18us; 68us; 24us; 52us; 26us; 55us; 28us; 57us; 29us; 29us; 30us; 28us; 7us; 32768us; 17us; 67us; 18us; 68us; 24us; 52us; 26us; 55us; 28us; 57us; 29us; 29us; 30us; 28us; 6us; 32768us; 18us; 68us; 24us; 52us; 26us; 55us; 28us; 57us; 29us; 29us; 30us; 28us; 6us; 32768us; 18us; 68us; 24us; 52us; 26us; 55us; 28us; 57us; 29us; 29us; 30us; 28us; 6us; 32768us; 18us; 68us; 24us; 52us; 26us; 55us; 28us; 57us; 29us; 29us; 30us; 28us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 1us; 32768us; 8us; 71us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 5us; 32768us; 8us; 73us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 5us; 32768us; 8us; 75us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 4us; 32768us; 24us; 52us; 26us; 54us; 29us; 29us; 30us; 28us; 0us; 16416us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 13us; 15us; 20us; 26us; 31us; 38us; 40us; 42us; 47us; 53us; 54us; 56us; 58us; 63us; 70us; 73us; 74us; 81us; 84us; 85us; 89us; 94us; 96us; 103us; 104us; 106us; 111us; 118us; 119us; 123us; 127us; 129us; 131us; 135us; 137us; 144us; 155us; 165us; 171us; 177us; 183us; 189us; 195us; 201us; 206us; 211us; 216us; 221us; 226us; 231us; 236us; 243us; 244us; 245us; 246us; 248us; 249us; 251us; 252us; 256us; 264us; 272us; 279us; 286us; 293us; 298us; 300us; 305us; 311us; 316us; 322us; 327us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 4us; 7us; 1us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 4us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 1us; 3us; 3us; 4us; 4us; 2us; 3us; 4us; 3us; 4us; 3us; 4us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; |]
let _fsyacc_reductions ()  =    [| 
# 282 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 291 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser/src/FM4FUNParser.fsp"
                                                      _1 
                   )
# 36 "Parser/src/FM4FUNParser.fsp"
                 : C));
# 302 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser/src/FM4FUNParser.fsp"
                                                                             Assign(_1, _4) 
                   )
# 58 "Parser/src/FM4FUNParser.fsp"
                 : C));
# 314 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser/src/FM4FUNParser.fsp"
                                                                             ArrAssign(_1, _3, _7)
                   )
# 59 "Parser/src/FM4FUNParser.fsp"
                 : C));
# 327 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser/src/FM4FUNParser.fsp"
                                                                             Skip 
                   )
# 60 "Parser/src/FM4FUNParser.fsp"
                 : C));
# 337 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser/src/FM4FUNParser.fsp"
                                                                             Seq(_1,_3) 
                   )
# 61 "Parser/src/FM4FUNParser.fsp"
                 : C));
# 349 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'guarded)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser/src/FM4FUNParser.fsp"
                                                                             If(_2) 
                   )
# 62 "Parser/src/FM4FUNParser.fsp"
                 : C));
# 360 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'guarded)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser/src/FM4FUNParser.fsp"
                                                                             Do(_2) 
                   )
# 63 "Parser/src/FM4FUNParser.fsp"
                 : C));
# 371 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolean)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser/src/FM4FUNParser.fsp"
                                                                             Cond(_1, _3) 
                   )
# 66 "Parser/src/FM4FUNParser.fsp"
                 : 'guarded));
# 383 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'guarded)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'guarded)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser/src/FM4FUNParser.fsp"
                                                                             Conc(_1, _3) 
                   )
# 67 "Parser/src/FM4FUNParser.fsp"
                 : 'guarded));
# 395 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser/src/FM4FUNParser.fsp"
                                                             N(_1) 
                   )
# 70 "Parser/src/FM4FUNParser.fsp"
                 : 'arithmetic));
# 406 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser/src/FM4FUNParser.fsp"
                                                             X(_1) 
                   )
# 71 "Parser/src/FM4FUNParser.fsp"
                 : 'arithmetic));
# 417 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser/src/FM4FUNParser.fsp"
                                                             ArrRead(_1, _3)
                   )
# 72 "Parser/src/FM4FUNParser.fsp"
                 : 'arithmetic));
# 429 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser/src/FM4FUNParser.fsp"
                                                             Add(_1,_3) 
                   )
# 73 "Parser/src/FM4FUNParser.fsp"
                 : 'arithmetic));
# 441 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser/src/FM4FUNParser.fsp"
                                                             Sub(_1,_3) 
                   )
# 74 "Parser/src/FM4FUNParser.fsp"
                 : 'arithmetic));
# 453 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser/src/FM4FUNParser.fsp"
                                                             Prod(_1,_3) 
                   )
# 75 "Parser/src/FM4FUNParser.fsp"
                 : 'arithmetic));
# 465 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser/src/FM4FUNParser.fsp"
                                                             Div(_1,_3) 
                   )
# 76 "Parser/src/FM4FUNParser.fsp"
                 : 'arithmetic));
# 477 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser/src/FM4FUNParser.fsp"
                                                             Neg(_2) 
                   )
# 77 "Parser/src/FM4FUNParser.fsp"
                 : 'arithmetic));
# 488 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser/src/FM4FUNParser.fsp"
                                                             Exp(_1,_3) 
                   )
# 78 "Parser/src/FM4FUNParser.fsp"
                 : 'arithmetic));
# 500 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser/src/FM4FUNParser.fsp"
                                                             _2 
                   )
# 79 "Parser/src/FM4FUNParser.fsp"
                 : 'arithmetic));
# 511 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser/src/FM4FUNParser.fsp"
                                                             Bool(_1) 
                   )
# 82 "Parser/src/FM4FUNParser.fsp"
                 : 'boolean));
# 522 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolean)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser/src/FM4FUNParser.fsp"
                                                             SingleAnd(_1, _3) 
                   )
# 83 "Parser/src/FM4FUNParser.fsp"
                 : 'boolean));
# 534 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolean)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser/src/FM4FUNParser.fsp"
                                                             SingleOr(_1, _3) 
                   )
# 84 "Parser/src/FM4FUNParser.fsp"
                 : 'boolean));
# 546 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolean)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser/src/FM4FUNParser.fsp"
                                                             DoubleAnd(_1, _4) 
                   )
# 85 "Parser/src/FM4FUNParser.fsp"
                 : 'boolean));
# 558 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolean)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser/src/FM4FUNParser.fsp"
                                                             DoubleOr(_1, _4) 
                   )
# 86 "Parser/src/FM4FUNParser.fsp"
                 : 'boolean));
# 570 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser/src/FM4FUNParser.fsp"
                                                             NegB(_2) 
                   )
# 87 "Parser/src/FM4FUNParser.fsp"
                 : 'boolean));
# 581 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser/src/FM4FUNParser.fsp"
                                                             Eq(_1, _3) 
                   )
# 88 "Parser/src/FM4FUNParser.fsp"
                 : 'boolean));
# 593 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser/src/FM4FUNParser.fsp"
                                                             Neq(_1, _4) 
                   )
# 89 "Parser/src/FM4FUNParser.fsp"
                 : 'boolean));
# 605 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser/src/FM4FUNParser.fsp"
                                                             Gt(_1, _3) 
                   )
# 90 "Parser/src/FM4FUNParser.fsp"
                 : 'boolean));
# 617 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser/src/FM4FUNParser.fsp"
                                                             Geq(_1, _4) 
                   )
# 91 "Parser/src/FM4FUNParser.fsp"
                 : 'boolean));
# 629 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser/src/FM4FUNParser.fsp"
                                                             Lt(_1, _3) 
                   )
# 92 "Parser/src/FM4FUNParser.fsp"
                 : 'boolean));
# 641 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser/src/FM4FUNParser.fsp"
                                                             Leq(_1, _4) 
                   )
# 93 "Parser/src/FM4FUNParser.fsp"
                 : 'boolean));
# 653 "Parser/src/FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser/src/FM4FUNParser.fsp"
                                                             _2 
                   )
# 94 "Parser/src/FM4FUNParser.fsp"
                 : 'boolean));
|]
# 665 "Parser/src/FM4FUNParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 34;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : C =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
